#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../main');
var debug = require('debug')('express_example:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create socket.io server.
 */
var io = require('socket.io')(server);
var nicknames = [];
io.sockets.on('connection', function(socket) {
   console.log('++++++ user connected');
  
  socket.on('join', function(data){
    console.log(data);
	console.log(nicknames.length);
    for (i=0; i<nicknames.length; i++) {
	  if (nicknames[i] == data){
	    console.log('aaa');
	    socket.emit('repeatedName', 'The nickname is repeated!');
		return;
      }
	}
    nicknames.push(data);    
	 
  });
  
  socket.on('disconnect', function() {
	socket.broadcast.emit('users', {number: count});
	console.log('------ user disconnected');
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}
